//! Error types

use num_derive::FromPrimitive;
use solana_program::{
    decode_error::DecodeError,
    program_error::ProgramError,
};
use thiserror::Error;

/// Errors that may be returned by the TokenLending program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum SilError {
    /// The account cannot be initialized because it is already in use.
    #[error("Account is already initialized")]
    AlreadyInitialized,
    ///
    #[error("Error push in FIFO group")]
    ErrorPushInFIFOGroup,
    ///
    #[error("Error push in LIFO group")]
    ErrorPushInLIFOGroup,
    ///
    #[error("Error pop from FIFO group")]
    ErrorPopFromFIFOGroup,
    ///
    #[error("Error push in user index")]
    ErrorPushInUserIndex,
    ///
    #[error("Error pop from user index")]
    ErrorPopFromUserIndex,
    ///
    #[error("Operating on empty queue")]
    EmptyQueue,
    ///
    #[error("Exceeds max queue num")]
    ExceedsMaxQueueNum,
    ///
    #[error("Program Version is not matched")]
    VersionIsNotMatched,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidAccountOwner,
    ///
    #[error("Input token account owner is invalid")]
    InvalidTokenAccountOwner,
    ///
    #[error("Authority is invalid")]
    InvalidAuthority,
    ///
    #[error("Match Pair is invalid")]
    InvalidMatchPair,
    ///
    #[error("Match Pair authority is invalid")]
    InvalidMatchPairAuthority,
    /// Invalid amount, must be greater than zero
    #[error("Input amount is invalid")]
    InvalidAmount,
    /// Invalid instruction data passed in.
    #[error("Failed to unpack instruction data")]
    InstructionUnpackError,
    /// Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow,
    /// Lamport balance below rent-exempt threshold.
    #[error("Lamport balance below rent-exempt threshold")]
    NotRentExempt,
    /// Token approve failed
    #[error("Token approve failed")]
    TokenApproveFailed,
    /// Token initialize account failed
    #[error("Token initialize account failed")]
    TokenInitializeAccountFailed,
    /// Token transfer failed
    #[error("Token transfer failed")]
    TokenTransferFailed,
    /// Token approve failed
    #[error("Token revoke failed")]
    TokenRevokeFailed,
}

impl From<SilError> for ProgramError {
    fn from(e: SilError) -> Self {
        ProgramError::Custom(e as u32)
    }
}

impl<T> DecodeError<T> for SilError {
    fn type_of() -> &'static str {
        "Sil Error"
    }
}